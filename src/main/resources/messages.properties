# There are many options on this file.
# The example above is the most specific way to determine a property's message.
# One could also use some of the options below:

# In this example, {0} translates to the property name.
#NotBlank={0} must not be blank, dude.

# It's possible to translate property names here too. In this example I'm camel-casing the 'name' property.
#name=Name

# One could also be specific, like so:
#restaurant.name=Name of the Restaurant

# Finally, in this example, I'm addressing every property called 'name' with a NotBlank problem
#NotBlank.name=A name must be provided.

####
# Below some values being used
####

#NotBlank=You must provide a valid value for {0}
#NotNull=You must provide the {0} value
#PositiveOrZero={0} must be equal or greater than 0
## Cuisine
#cuisine.name=Cuisine Name
#cuisine.id=Cuisine ID
## Restaurant
#NotNull.restaurant.deliveryFee=You must provide the {0} value
#NotNull.restaurant.cuisine=You must provide the {0} value
#restaurant.name=Reataurant Name
#restaurant.cuisine=Restaurant Cuisine
#restaurant.deliveryFee=Restaurant Delivery Fee
## Province
#province.name=Province Name
#province.id=Province ID
## City
#city.name=City Name
#city.province=City Province
## Group
#group.name=Group Name
#group.id=Group ID

# Did you notice everything is commented? Yeah, the reason is that Spring already have its own translation to several
# languages, including english and portuguese, so I decided not to use specific messages.

# Below is the message for our custom annotation @DeliveryFee
deliveryFee.notNullAndPositiveOrZero=Delivery Fee must not be null nor negative (this message comes from a custom annotation)

# Below we define our message for our custom annotation. It includes the multiple expected.
# Multiple=must be multiple of {1} (coming from the message.properties file)

# Below we define our message template for our custom class-level annotation. It includes the field names as defined in the class where the annotation is present.
IfFreeDeliverySubtotalEqualsTotal=When {1} is 0 {2} and {3} must be equal

# Validation messages for OrderFilter (a class to search for Orders)
typeMismatch.java.lang.Long={0} must be a valid number
orderFilter.clientId=Client ID
orderFilter.restaurantId=Restaurant ID
typeMismatch.java.time.OffsetDateTime={0} must be in a valid ISO date and time format with a time zone designator
orderFilter.createDateStart=Create Date Start
orderFilter.createDateEnd=Create Date End
